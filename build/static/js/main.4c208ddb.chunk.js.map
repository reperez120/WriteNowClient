{"version":3,"sources":["LandingPage/LandingPage.js","SentenceGeneratorPage/SentenceGeneratorPage.js","App/App.js","index.js"],"names":["LandingPage","react_default","a","createElement","className","react_router_dom","to","type","Component","SentenceGeneratorPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleGenre","e","setState","genre","target","value","handleFormSubmit","preventDefault","loading","state","options","method","url","formatQueryParams","params","keys","map","key","concat","encodeURIComponent","join","getVerb","fetch","then","response","json","data","verb","Math","floor","random","length","word","getPrep","preposition","getWildLocAdj","locationAdjective","subjectAdjective","subject","location","firstArticle","article","punctuation","downloadPromptText","subAdjQueryString","getSubAdj","subQueryString","getSubject","locAdjQueryString","getLocAdj","locQueryString","locUrl","console","log","getLoc","downloadPrompt","element","document","file","Blob","getElementById","href","URL","createObjectURL","download","body","appendChild","click","sentence","onSubmit","id","name","checked","onChange","onClick","App","react_router","exact","path","component","ReactDOM","render","src_App_App"],"mappings":"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","file":"static/js/main.4c208ddb.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport \"./LandingPage.css\"\n\nclass LandingPage extends Component {\n    render() {\n      return (\n        <div className='LandingPage'>\n          <header className='appHeader'>\n          <div className='image'>\n           </div>\n          </header>\n            <main> \n                <div className='logoImage'>\n                </div>\n                <h2>A Writing Prompt App</h2>\n\n                <h3>\n                    Suffering from writer's block? \n                    Write Now is here to help! \n                    This app generates writing prompts based on your genre selection.\n                </h3>\n                <form className='entry-form'>\n                    <Link to=\"/sentence-generator\">\n                        <button type='submit'>Write now!</button> \n                    </Link>   \n                </form>\n            </main>\n       </div>\n      );\n    } \n  }\n  \n  export default LandingPage;\n","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport \"./SentenceGeneratorPage.css\"\n\nclass SentenceGeneratorPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        genre: '',\n        firstArticle: '',\n        subjectAdjective: [],\n        subject: [],\n        verb: [],\n        preposition: [],\n        article: '',\n        locationAdjective: [],\n        location: [],\n        punctuation: [],\n        downloadPromptText: '',\n        loading: false\n      };\n    }\n\n    handleGenre = e => {\n        this.setState({\n            genre: e.target.value\n        });\n    } \n    \n    handleFormSubmit = e => {\n\n        e.preventDefault()\n        this.setState({ loading: true })\n\n        const genre = this.state.genre;\n        const options = {\n            method: 'GET',\n        }\n        const url = 'https://calm-hamlet-15286.herokuapp.com/words?';\n    \n        function formatQueryParams(params) {\n        const queryItems = Object.keys(params)\n            .map(key => `${encodeURIComponent(key)}=${params[key]}`)\n        return queryItems.join('&');\n        }\n        \n        let getVerb = () => {\n            const verbUrl = url + 'type=verb'    \n             fetch(verbUrl,  options)\n             .then(response => response.json())\n                 .then(data => {\n                     let ver = data[Math.floor(Math.random() * data.length)]\n                     let verb = ver.word   \n                     this.setState({\n                         verb,\n                     })\n                 })\n        }\n \n        let getPrep = () => {\n            const prepUrl = url + 'type=preposition';       \n            fetch(prepUrl,  options)\n                .then(response => response.json())\n                    .then(data => {\n                        let prep = data[Math.floor(Math.random() * data.length)]\n                        let preposition = prep.word   \n                        this.setState({\n                            preposition,\n                        })\n                    })\n        }\n\n        if (this.state.genre === 'wildcard') {\n\n            let getWildSubAdj = () => {\n                const wildSubAdjUrl = url + 'type=sub-adj'    \n                fetch(wildSubAdjUrl,  options)\n                .then(response => response.json())\n                    .then(data => {\n                        let subadj = data[Math.floor(Math.random() * data.length)]\n                        let subjectAdjective = subadj.word   \n                        this.setState({\n                            subjectAdjective,\n                        })\n                    })\n            }\n\n            let getWildSubject = () => {\n                const wildSubUrl = url + 'type=subject'    \n                fetch(wildSubUrl,  options)\n                .then(response => response.json())\n                    .then(data => {\n                        let sub = data[Math.floor(Math.random() * data.length)]\n                        let subject = sub.word   \n                        this.setState({\n                            subject,\n                        })\n                    })\n            }\n\n            let getWildLocAdj = () => {\n                const wildLocAdjUrl = url + 'type=loc-adj'    \n                fetch(wildLocAdjUrl,  options)\n                .then(response => response.json())\n                    .then(data => {\n                        let locAdj = data[Math.floor(Math.random() * data.length)]\n                        let locationAdjective = locAdj.word   \n                        this.setState({\n                        locationAdjective,\n                        })\n                    })\n            }\n\n            let getWildLoc = () => {\n            const wildLocUrl = url + 'type=location'    \n                fetch(wildLocUrl,  options)\n                .then(response => response.json())\n                    .then(data => {\n                        let loc = data[Math.floor(Math.random() * data.length)]\n                        let location = loc.word   \n                        this.setState({\n                        location,\n                        })\n                })\n            }\n                \n         let getWildCard = () => {\n            getWildSubAdj();\n            getWildSubject();\n            getWildLocAdj();\n            getVerb();\n            getPrep();\n            getWildLocAdj();\n            getWildLoc();  \n            this.setState({\n                firstArticle: 'The',\n                article: 'the',\n                punctuation: '.',\n                loading: false,\n                downloadPromptText: 'Download prompt as TXT file.',\n            })                 \n            }\n\n            getWildCard();\n\n        } else {\n\n        let getSubAdj = () => {\n            const subAdj = 'sub-adj'\n            const SubAdjParams = {\n                type: subAdj,\n                genre: genre,\n            }\n            const subAdjQueryString = formatQueryParams(SubAdjParams);\n            const subAdjUrl = url + subAdjQueryString;\n            fetch(subAdjUrl,  options)\n                .then(response => response.json())\n                    .then(data => {\n                        let subAdj = data[Math.floor(Math.random() * data.length)]\n                        let subjectAdjective = subAdj.word   \n                        this.setState({\n                            subjectAdjective,\n                        })\n                    })\n        }\n\n        let getSubject = () => {         \n            const sub = 'subject'  \n            const subParams = {\n                type: sub,\n                genre: genre,\n            }\n            const subQueryString = formatQueryParams(subParams);\n             const subUrl = url + subQueryString;\n            fetch(subUrl,  options)\n                .then(response => response.json())\n                    .then(data => {\n                        let sub = data[Math.floor(Math.random() * data.length)]\n                        let subject = sub.word   \n                        this.setState({\n                            subject,\n                        })\n                    })\n        }\n\n        let getLocAdj = () => {\n            const locAdj = 'loc-adj'\n            const locAdjParams = {\n                type: locAdj,\n                genre: genre,\n            }\n            const locAdjQueryString = formatQueryParams(locAdjParams);\n            const locAdjUrl = url + locAdjQueryString;\n            fetch(locAdjUrl,  options)\n                .then(response => response.json())\n                    .then(data => {\n                        let locadj = data[Math.floor(Math.random() * data.length)]\n                        let locationAdjective = locadj.word   \n                        this.setState({\n                            locationAdjective,\n                        })\n                  })\n        }\n\n        let getLoc = () => {\n            const location = 'location'\n            const locParams = {\n                type: location,\n                genre: genre,\n            }\n            const locQueryString = formatQueryParams(locParams);\n            const locUrl = url + locQueryString;\n            console.log(locUrl);\n            fetch(locUrl,  options)\n                .then(response => response.json())\n                    .then(data => {\n                        let loc = data[Math.floor(Math.random() * data.length)]\n                        let location = loc.word   \n                        this.setState({\n                            location,\n                        })\n                    })\n        }\n\n        let getPrompt = () =>  {\n            getSubAdj();\n            getSubject();\n            getVerb();\n            getPrep();\n            getLocAdj();\n            getLoc();    \n            this.setState({\n                firstArticle: 'The',\n                article: 'the',\n                punctuation: '.',\n                loading: false,\n                downloadPromptText: 'Download prompt as TXT file.',\n            })\n        }\n\n        getPrompt();\n        }\n    }\n\n    downloadPrompt = () => {\n        const element = document.createElement(\"a\");\n        const file = new Blob([document.getElementById('promptDownload').value], {type: 'text/plain'});\n        element.href = URL.createObjectURL(file);\n        element.download = \"WriteNowPrompt.txt\";\n        document.body.appendChild(element); \n        element.click();\n    }\n\n    render() {\n\n        const firstArt = this.state.firstArticle;\n        const subadj = this.state.subjectAdjective; \n        const sub = this.state.subject;\n        const verb = this.state.verb;\n        const prep = this.state.preposition; \n        const art = this.state.article;\n        const locadj = this.state.locationAdjective;\n        const loc = this.state.location;\n        const punct = this.state.punctuation;\n        const space = ' '\n        const sentence = firstArt + space + subadj + space + sub + space + verb + space + prep + space + art + space + locadj +  space + loc + punct \n\n      return (\n          \n        <div className='SentenceGenerator'>\n            <header className='appHeader'>\n                <h2 className='description'>\n                    Select a genre. Then click the \"write now\" button to get a writing prompt in that genre. \n                    Select \"wild card\" or click on the \"write now\" button without selecting anything to \n                    get a sentence that combines elements from all the genres.\n                </h2>\n            </header>\n            <main> \n                <form className='radioform' onSubmit={this.handleFormSubmit}>\n                <fieldset>\n                        <legend>literary genre</legend>\n                        <div className='radioButtons'>\n                            <label className='scifiButton'>\n                                <input id=\"scifi\" type=\"radio\" className='radioButton' value=\"scifi\" name=\"option\" \n                                    checked={this.state.genre === 'scifi'}\n                                    onChange={this.handleGenre}/> \n                            </label>\n                            <label className='fantasyButton'>\n                                <input id=\"fantasy\" type=\"radio\" className='radioButton' value=\"fantasy\" name=\"option\" \n                                    checked={this.state.genre === 'fantasy'}\n                                    onChange={this.handleGenre}/> \n                            </label>\n                            <label className='horrorButton'>\n                                <input id=\"horror\" type=\"radio\" className='radioButton' value=\"horror\" name=\"option\" \n                                    checked={this.state.genre === 'horror'}\n                                    onChange={this.handleGenre}/> \n                            </label>\n                            <label className='westernButton'>\n                                <input id =\"western\" type=\"radio\" className='radioButton' value=\"western\" name=\"option\" \n                                    checked={this.state.genre === 'western'}\n                                    onChange={this.handleGenre}/> \n\n                            </label>\n                            <label className='litButton'>\n                                <input id=\"lit\" type=\"radio\" className='radioButton' value=\"lit\" name=\"option\" \n                                checked={this.state.genre === 'lit'}\n                                onChange={this.handleGenre}/> \n                            </label>\n                            <label className='wildcardButton'>\n                                <input id=\"wildcard\" type=\"radio\" className='radioButton' value=\"wildcard\" name=\"option\" \n                                checked={this.state.genre === 'wildcard'}\n                                onChange={this.handleGenre}/>\n                            </label>\n                            </div>\n                    <button type='submit' className='writeButton'>\n                        Write now!\n                    </button>  \n                    <Link to=\"/\">\n                        <button className='homeBotton'>\n                            Home\n                        </button>  \n                    </Link> \n                    </fieldset> \n                </form>\n                {this.state.loading ? <h1>Loading...</h1>: null}\n                <h3 id=\"promptSentence\">\n                    {sentence}\n                </h3>   \n                <input \n                    id=\"promptDownload\" \n                    value={sentence}\n                /> \n                    <button className=\"downloadButton\"\n                    onClick={this.downloadPrompt}>\n                    {this.state.downloadPromptText}\n                </button>\n                <div className='credit'>images by Shane Kearney</div>\n            </main>\n       </div>\n      );\n    } \n  }\n\n  export default SentenceGeneratorPage;\n","import React from 'react';\nimport { Route} from 'react-router-dom';\nimport LandingPage from '../LandingPage/LandingPage';\nimport SentenceGeneratorPage from '../SentenceGeneratorPage/SentenceGeneratorPage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className='appHeader'>\n            <h1>\n              Write Now\n            </h1>\n      </header>\n        <main>\n        <Route \n          exact path='/' \n          component={LandingPage} \n          />\n       <Route \n          exact path='/sentence-generator' \n          component={SentenceGeneratorPage} \n        /> \n        </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App/App';\nimport './index.css';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\ndocument.getElementById('root')\n);"],"sourceRoot":""}